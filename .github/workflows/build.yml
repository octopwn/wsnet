name: Build Executables

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
        architecture: [x86_64, arm64]
      exclude:
        - os: windows-latest
          architecture: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Compile to executable
      run: |
        pyinstaller --onefile wsnet/server/wsserver.py --hidden-import cryptography --hidden-import cffi --hidden-import cryptography.hazmat.backends.openssl --hidden-import cryptography.hazmat.bindings._openssl --hidden-import unicrypto --hidden-import unicrypto.backends.pycryptodome.DES --hidden-import  unicrypto.backends.pycryptodome.TDES --hidden-import unicrypto.backends.pycryptodome.AES --hidden-import unicrypto.backends.pycryptodome.RC4 --hidden-import unicrypto.backends.pure.DES --hidden-import  unicrypto.backends.pure.TDES --hidden-import unicrypto.backends.pure.AES --hidden-import unicrypto.backends.pure.RC4 --hidden-import unicrypto.backends.cryptography.DES --hidden-import  unicrypto.backends.cryptography.TDES --hidden-import unicrypto.backends.cryptography.AES --hidden-import unicrypto.backends.cryptography.RC4 --hidden-import unicrypto.backends.pycryptodomex.DES --hidden-import  unicrypto.backends.pycryptodomex.TDES --hidden-import unicrypto.backends.pycryptodomex.AES --hidden-import unicrypto.backends.pycryptodomex.RC4 
      shell: bash

    - name: Archive the executable (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v3
      with:
        name: wsnet_windows
        path: dist/wsserver.exe

    - name: Archive the executable (macOS Intel)
      if: matrix.os == 'macos-latest' && matrix.architecture == 'x86_64'
      uses: actions/upload-artifact@v3
      with:
        name: wsnet_macos_intel
        path: dist/wsserver

    - name: Archive the executable (macOS Apple Silicon)
      if: matrix.os == 'macos-latest' && matrix.architecture == 'arm64'
      uses: actions/upload-artifact@v3
      with:
        name: wsnet_macos_arm64
        path: dist/wsserver

    - name: Archive the executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: wsnet_linux
        path: dist/wsserver
